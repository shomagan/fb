/* ФБ "Насос с АПВ" */
#include "../kernel.h"
typedef struct {
	Register_type Dist_mode;			//bit			1 - Дистанционный режим 0 - местный режим//0-работа в ручную
	Register_type Cmd_ON;				//bit			Команда включить (пока удерживается 1 необходимо запустить НА)
	Register_type Cmd_OFF;				//bit			Команда отключить (пока удерживается 1 необходимо остановить НА)
	Register_type Actuator;				//bit			Состояние пускателя 1 - замкнут 0 - разомкнут
	Register_type Alarm;				//bit			Авария (выключение происходит только после истечения времени неоходимого на запуск)
	Register_type Block;				//bit			Блокировка (полная остановка двигателя, дальнейшая работа возможна только после ResetAlarm)
	Register_type Reset;			//bit			Сброс аварий(импульсный вход желательно 1 такт исполнения конфигурации)
	Register_type ImpulsONOFFTime;		//uint8			Время в сек в течении которого действует выход управления на пускатель НА
	Register_type ActuatorTime;			//uint32		Время в сек ожидания желаемого состояния пускателя
	Register_type ActuatorRestart;		//uint16		Количество попыток ожидания желаемого состояния пускателя
	Register_type TimeNonStop;			//uint32		Время пуска НА в сек (в течении которого не реагировать на тревогу на время пуска)
	Register_type APV_TryNum;			//uint16		Количество попыток АПВ
	Register_type APV_Interval;			//uint32		Время между попытками АПВ
} fb00090_IN_type;

typedef struct {
	Register_type SecTimer;				//uint8			Внутренний счетчик для отсчета секунд
	Register_type CntReinitAPV;			//uint32		Внутренний счетчик переинициализации АПВ
} fb00090_VAR_type;

typedef struct {
	Register_type Control_ON;			//bit			Выход на включение пускателя НА
	Register_type Control_OFF;			//bit			Выход на выключение пускателя НА
	Register_type stUprav;				//bit			Признак, что НА воспринимает управляющие команды??
	Register_type CntActTime;			//uint32		Счетчик времени в сек ожидания состояния пускателя
	Register_type CntActRestart;		//uint16		Счетчик количества попыток ожидания состояния пускателя//для режима запуска по АПВ
	Register_type CntNonStop;			//uint32		Счетчик времени в сек времени пуска НА (начинает работать после ожидания состояния пускателя)
	Register_type APV_TryCnt;			//uint16		Счетчик попыток АПВ
	Register_type APV_Timer;			//uint32		Счетчик времени в сек после исчезновения тревоги 
	Register_type CntImpONOFF;			//uint8			Счетчик времени в сек управляющего воздействия на пускатель
	Register_type State;				//uint32		Текущее состояние алгоритма работы НАСОС с АПВ (расшифровка ниже)
} fb00090_OUT_type;

//--------------- Состояния алгоритма работы НАСОС с АПВ ------------------
#define s00090_Dist			(1<<0)		//Флаг дистанционного режима
#define s00090_Actuator			(1<<1)		//Флаг замкнутого пускателя
#define s00090_Block			(1<<2)		//Признак наличия блокировки
#define s00090_Alarm			(1<<3)		//Признак наличия аварии

#define s00090_APVon			(1<<4)		//Флаг указывающий что НА нaстроен на АПВ(0)
#define s00090_flAlarm			(1<<5)		//Флаг наличия аварии, сбрасывается по входу Сброс аварии (ResetAlarm) или АПВ
#define s00090_flBlock			(1<<6)		//Флаг наличия блокировки
#define s00090_WaitActuator		(1<<7)		//Режим отработки ОЖИДАНИЕ ПУСКАТЕЛЯ

#define s00090_ExpectActuator		(1<<8)		//При режиме отработки ОЖИДАНИЕ ПУСКАТЕЛЯ показывает желаемое состояние пускателя 1-Замкнут 0-Разомкнут(0)
#define s00090_WaitBlock		(1<<9)		//неиспользуется
#define s00090_WaitAPV			(1<<10)		//Ожидание интервала между попытками АПВ
#define s00090_APV_TryCnt_Null		(1<<11)		//Флаг что кончиличь попытки АПВ(сбрасывается только при импульсе ResetAlarm)

#define s00090_Need_ON			(1<<12)		//Необходимо включить(0)
#define s00090_Need_OFF			(1<<13)		//Необходимо отключить(0)
#define s00090_ActuatorFail_OFF		(1<<14)		//Не дождались пускателя при выключении
#define s00090_ActuatorFail_ON		(1<<15)		//Не дождались пускателя при включении

#define s00090_ReinitAPV		(1<<16)		//Ожидание инициализации АПВ после очередного автоматического запуска после аварии
											//т.е. если НА запустился по попытке АПВ, то ждем когда попытки АПВ вернуть в начальное значение
#define s00090_WaitImpONOFF		(1<<17)		//Флаг ожидания импульса включения или отключения
#define s00090_WaitImpSTOP		(1<<18)		//Флаг принудительного импульса отключения после неудачного включения (не дождались пускателя на включение)(0)

//------------------ Маски условий ---------------------------

#define s00090_StartMaskAPV		(s00090_Dist|s00090_Need_ON|s00090_APVon|s00090_ReinitAPV|s00090_Alarm)	//2-ая маска условий при которых можно запустить насос
#define s00090_BlockMask		(s00090_Dist | s00090_Block | s00090_Actuator | s00090_APVon )	//маска условий при которых срабатывает блокировка
#define s00090_UpravMask		(s00090_Dist | s00090_APVon | s00090_Alarm | s00090_Block | s00090_Actuator )	//маска условий при которых насос воспринимает команды включения и отключения
#define s00090_APVMask2ON		(s00090_Dist | s00090_flAlarm | s00090_APVon |  s00090_ReinitAPV|s00090_Alarm )
#define s00090_APVMask1OFF		~(s00090_APVMask1ON)
#define s00090_APVMask2OFF		~(s00090_APVMask2ON)

void fb00090_exec();

                               
u32 fb00090_var_size(u8 type);
